parameters:
  - name: environmentName
    type: string
  - name: serviceName
    type: string
  - name: locationCode
    type: string

jobs:
  - deployment: apply_${{ parameters.serviceName }}_${{ parameters.locationCode }}_${{ parameters.environmentName }}
    pool:
      vmImage: ubuntu-latest
    variables:
      - template: ../variables/${{ parameters.environmentName }}.job.vars.yml
    environment: "Environment_${{ parameters.serviceName }}_${{ parameters.locationCode }}_${{ parameters.environmentName }}"
    strategy:
      runOnce:
        deploy:
          steps:
            # skip the built-in download task in favour of the explicit one that we have more control over
            # see https://learn.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#artifacts-in-release-and-deployment-jobs
            - download: none
            # download the artifacts created by the build
            - template: ../tasks/download_artifacts_task.yml

            # fetch credentials from Az CLI into environment vars
            - template: ../tasks/terraform_creds_task.yml
              parameters:
                azureSubscriptionName: ${{ variables.AzureRMServiceConnection}}

            # terraform init
            - template: ../tasks/terraform_init_azurebackend_task.yml
              parameters:
                tfstateResourceGroupName: ${{ variables.tfstateResourceGroupName}}
                tfstateStorageAccountName: ${{ variables.tfstateStorageAccountName}}
                tfstateStorageContainerName: ${{ variables.tfstateStorageContainerName}}
                workingDirectory: '$(Pipeline.Workspace)/artifacts/'

            # terraform validate
            - template: ../tasks/terraform_validate_task.yml
              parameters:            
                workingDirectory: '$(Pipeline.Workspace)/artifacts/'

            # terraform apply
            - template: ../tasks/terraform_apply_task.yml
              parameters:
                environmentTFVARS: ${{ variables.environmentTFVARS}}
                workingDirectory: '$(Pipeline.Workspace)/artifacts/'