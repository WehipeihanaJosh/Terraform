parameters:
  - name: azureSubscriptionName
    type: string
  - name: resourceGroupName
    type: string
  - name: storageAccountName
    type: string
  - name: tfstateContainer
    type: string
  - name: location
    type: string

steps:
  - task: AzurePowerShell@5
    displayName: Check for TF Azure backend
    inputs:
      azureSubscription: ${{ parameters.azureSubscriptionName }}
      scriptType: "inlineScript"
      azurePowerShellVersion: latestVersion
      pwsh: true      
      inlineScript: |
        $resource_group_name = ${{ parameters.resourceGroupName }}
        $storage_account_name = ${{ parameters.storageAccountName }}
        $container_name = ${{ parameters.tfstateContainer }}
        $location = ${{ parameters.location }}

        # create resource group
        try {
            $rg = (Get-AzResourceGroup -Name $resource_group_name).resourceid
        }
        catch {}
        if ($null -eq $rg) {
            Write-Host "Creating resource group: $resource_group_name in location $location"
            try {
                New-AzResourceGroup -Name $resource_group_name -location $location
            }
            catch {
                throw ("Can't create resource group - {0}" -f $_.Exception)
            }
        }
        else {
            Write-Host "Using existing resource group: $resource_group_name"
        }
        # Create storage account
        try {
            $sa = Get-AzStorageAccount -resourcegroup $resource_group_name -name $storage_account_name
        }
        catch {}
        if ($null -eq $sa) {
            Write-Host "Creating storage account: $storage_account_name"
            try {
                $sa = New-AzStorageAccount -ResourceGroupName $resource_group_name -Name $storage_account_name  -Location $location -SkuName Standard_LRS -Kind BlobStorage -AccessTier Hot
            }
            catch {
                throw ("Can't create storage account - {0}" -f $_.Exception)
            }            
        }
        else {
            Write-Host "Using existing storage account: $storage_account_name"
        }        
        $account_key = (Get-AzStorageAccountKey -ResourceGroupName $resource_group_name -Name $sa.StorageAccountName)[0].Value
        $sac = New-AzStorageContext -StorageAccountName $sa.StorageAccountName -StorageAccountKey $account_key
        # create container
        if ($null -eq (Get-AzstorageContainer -context $sac | Where-Object Name -eq $container_name)) {
            Write-Host "Creating storage container: $container_name"
            try {            
                New-AzStorageContainer -name $container_name -Context $sac
            }
            catch {
                throw ("Can't create storage container - {0}" -f $_.Exception)
            }              
        }
        else {
            Write-Host "Using existing storage container: $container_name"
        }
